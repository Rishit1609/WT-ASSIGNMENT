[10:27 pm, 15/04/2022] Sayaniii: What is Java?
Java is a popular programming language, created in 1995.

It is owned by Oracle, and more than 3 billion devices run Java.

It is used for:

Mobile applications (specially Android apps)
Desktop applications
Web applications
Web servers and application servers
Games
Database connection
And much, much more!
Why Use Java?
Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)
It is one of the most popular programming language in the world
It is easy to learn and simple to use
It is open-source and free
It is secure, fast and powerful
It has a huge community support (tens of millions of developers)
Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs
As Java is close to C++ and C#, it makes it easy for programmers to switch to Java or vice versa
[10:27 pm, 15/04/2022] Sayaniii: Why to Learn java Programming?
Java is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Software Development Domain. I will list down some of the key advantages of learning Java Programming:

Object Oriented − In Java, everything is an Object. Java can be easily extended since it is based on the Object model.

Platform Independent − Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.

Simple − Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.

Secure − With Java's secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.

Architecture-neutral − Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.

Portable − Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.

Robust − Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.

Hello World using Java Programming.
Just to give you a little excitement about Java programming, I'm going to give you a small conventional C Programming Hello World program, You can try it using Demo link.

Live Demo
public class MyFirstJavaProgram {

   /* This is my first java program.
    * This will print 'Hello World' as the output
    */

   public static void main(String []args) {
      System.out.println("Hello World"); // prints Hello World
   }
}
Applications of Java Programming
The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.

The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere.

Multithreaded − With Java's multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.

Interpreted − Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.

High Performance − With the use of Just-In-Time compilers, Java enables high performance.

Distributed − Java is designed for the distributed environment of the internet.

Dynamic − Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.
[10:27 pm, 15/04/2022] Sayaniii: Java JDK, JRE and JVM
In this tutorial, you will learn about JDK, JRE, and JVM. You will also learn the key differences between them.

What is JVM?
JVM (Java Virtual Machine) is an abstract machine that enables your computer to run a Java program.

When you run the Java program, Java compiler first compiles your Java code to bytecode. Then, the JVM translates bytecode into native machine code (set of instructions that a computer's CPU executes directly).

Java is a platform-independent language. It's because when you write Java code, it's ultimately written for JVM but not your physical machine (computer). Since JVM ​executes the Java bytecode which is platform-independent, Java is platform-independent.
[10:27 pm, 15/04/2022] Sayaniii: What is JRE?
JRE (Java Runtime Environment) is a software package that provides Java class libraries, Java Virtual Machine (JVM), and other components that are required to run Java applications.

JRE is the superset of JVM.
[10:27 pm, 15/04/2022] Sayaniii: What is JDK?
JDK (Java Development Kit) is a software development kit required to develop applications in Java. When you download JDK, JRE is also downloaded with it.

In addition to JRE, JDK also contains a number of development tools (compilers, JavaDoc, Java Debugger, etc).
[10:27 pm, 15/04/2022] Sayaniii: How JVM, JRE and JDK work together
Let’s first look at how the three core components of Java work together, and then we can examine the differences. The diagram below provides an image of how JVM, JRE and JDK fit together in the Java landscape.

If you envision a baseball sliced open, it contains three main components: the round cushioned core, the wool and cotton midsection and the cowhide exterior. A ball without all three of these layers will not perform its intended function. Much like the three basic parts of a baseball, JVM, JRE and JDK all have very specific functions. Without all three, Java will not operate successfully.
[10:27 pm, 15/04/2022] Sayaniii: JDK vs. JRE vs. JVM: Key differences
And now, for the differences:

JDK is the development platform, while JRE is for execution.
JVM is the foundation, or the heart of Java programming language, and ensures the program’s Java source code will be platform-agnostic.
JVM is included in both JDK and JRE – Java programs won’t run without it.
[10:27 pm, 15/04/2022] Sayaniii: ava OOPs Concepts
Object-Oriented Programming
Advantage of OOPs over Procedure-oriented programming language
Difference between Object-oriented and Object-based programming language.
In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts, such as inheritance, data binding, polymorphism, etc.

Simula is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.

Smalltalk is considered the first truly object-oriented programming language.

The popular object-oriented languages are Java, C#, PHP, Python, C++, etc.

The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc.

OOPs (Object-Oriented Programming System)
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:

Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation
Apart from these concepts, there are some other terms which are used in Object-Oriented design:

Coupling
Cohesion
Association
Aggregation
Composition
Java OOPs Concepts
Object
Java Object
Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.

An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other's data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.

Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.

Class
Collection of objects is called class. It is a logical entity.

A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism in Java
Polymorphism
If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.

In Java, we use method overloading and method overriding to achieve polymorphism.

Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.

In Java, we use abstract class and interface to achieve abstraction.

Encapsulation in Java OOPs Concepts
Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.

A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.

Coupling
Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.

Cohesion
Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.

Association
Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:

One to One
One to Many
Many to One, and
Many to Many
Let's understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many).

Association can be undirectional or bidirectional.

Aggregation
Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as a has-a relationship in Java. Like, inheritance represents the is-a relationship. It is another way to reuse objects.

Composition
The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically.

Advantage of OOPs over Procedure-oriented programming language
1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented programming language, it is not easy to manage if code grows as project size increases.

2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, global data can be accessed from anywhere.

Global Data
Figure: Data Representation in Procedure-Oriented Programming


Object Data
Figure: Data Representation in Object-Oriented Programming

3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.
[10:27 pm, 15/04/2022] Sayaniii: Characteristics of Java
Java is simple
Object-Oriented
Platform Independent
Secure
Robust
Architectural Neutral
Portable
Performance
Distributed
Multithreaded
Java is dynamic
[10:27 pm, 15/04/2022] Sayaniii: Ever since it has been introduced, Java has been the talk of the town. Its predecessor C++ (which is also an object-oriented programming language) had some drawbacks. Java came as an apt replacement for C++. Java’s endurance is amazing considering the fact that the latest technologies replace the old ones at a tremendous rate; more than two decades after its creation, Java is still the most popular language for application software development. At the moment, Java is one of the most widely used programming languages. It is so powerful that you can do almost anything with it, from simple applications to web servers. This makes the Java programming language a viable option for all types of developers, regardless of the type of work they prefer to do.

Sun Microsystems released Java in 1995, which is a cross-platform object-oriented programming language. It is an object-oriented programming language that powers modern apps and websites. It is simple to use and removes many of C++’s complexities, such as the use of pointers and multiple inheritance. Many of its rules and syntaxes are similar to those of C and C++ programming languages. Java applications are usually compiled to bytecode, which can execute on any Java virtual machine (JVM), regardless of the computer architecture. The portability of Java-based software (which means that you can write your code in a system and run it anywhere) is one of the most important characteristics of Java. Java also provides runtime dynamic capabilities like runtime code modification and garbage collection. Java comes with various features, which make it a powerful language. In this article, we are going to discuss these Java features in detail.
[10:27 pm, 15/04/2022] Sayaniii: Characteristics of Java
Java is simple
Java is simple
Don’t get me wrong here! Java is not a cakewalk, but its syntax is simple and easy to understand. It derives many of its syntaxes from C and C++ programming languages, so if you know any of these languages, Java will be easy for you. Java has done away with many complicated and lesser-used features like pointers, operator overloading, etc. Moreover, an Automatic garbage collector removes unused and memory-consuming object instances, without having to do that manually.
[10:27 pm, 15/04/2022] Sayaniii: Object-Oriented
[10:27 pm, 15/04/2022] Sayaniii: Java is an object-oriented programming language. Object-oriented programming (OOP) is a programming paradigm that organizes software design around data, rather than functions and logic. An object is a data field with its own set of properties and behavior. For example, a student class can have variables like Name, Class, Roll Number, Father’s Name, Marks, and methods to store and retrieve these values. 

Object-oriented programming (OOP) focuses on the objects that developers desire to handle, rather than the logic that is required to manipulate them. This kind of programming is ideally suited to big, complicated, and frequently updated or maintained projects. This encompasses manufacturing and design software, as well as mobile applications; for example, OOP may be used to simulate manufacturing systems. The basic concepts of OOPs are:

Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation
[10:27 pm, 15/04/2022] Sayaniii: Platform Independent
Platform Independent
Java code can run on multiple platforms, including Windows, Linux, macOS, and others. The compiler compiles Java code and converts it to byte code. Because it can operate on different systems, this byte code is platform-independent, i.e. Write Once, Run Anywhere (WORA).
[10:27 pm, 15/04/2022] Sayaniii: Secure
Java is used in a networked and distributed environment. The following features make Java a secure language:

No use of explicit pointers
Java Program runs inside a virtual sandbox (Java Virtual Machine or JVM).
Classloader: The Java Runtime Environment (JRE) includes a classloader that is used to dynamically load Java classes into the Java Virtual Machine. It improves security by isolating the package for local file system classes from those imported from network sources.
Byte code verifier
Security Manager: It determines the resources a class has access to, such as reading and writing to the local disc.
[10:27 pm, 15/04/2022] Sayaniii: Robust
The term “robust”  means strong.  But in a programmer’s dictionary, it means reliable. There is no programming language that can guarantee total dependability. Because Java compilers can discover many flaws that would show up at execution time in other languages, Java places a high value on early error checking. Certain types of error-prone programming constructs common in other languages have been removed in Java. It does not, for example, support pointers, which eliminates the risk of overwriting memory and damaging data. To provide programming support for resilience, Java has a runtime exception-handling mechanism. Java forces the programmer to develop exception-handling code. Java can detect and respond to unusual circumstances, allowing the application to continue running normally while elegantly terminating when a runtime fault arises.
[10:27 pm, 15/04/2022] Sayaniii: Architectural Neutral
Because there are no implementation-dependent aspects in Java, such as the size of primitive types, it is architecture-neutral. In C programming, the int data type takes up two bytes in 32-bit architecture and four bytes in 64-bit architecture. In Java, however, it takes up 4 bytes of memory on both 32-bit and 64-bit architectures, which provides liberty to the developer for byte overflow or slicing.
[10:27 pm, 15/04/2022] Sayaniii: Portable
Java programs are portable because they are architecture-independent. They don’t need to be re-compiled to run on any platform. Java programs can be converted into byte code, which can be easily carried.
[10:27 pm, 15/04/2022] Sayaniii: Performance
Performance
Java’s performance and efficiency are remarkable since byte codes are very close to machine code. However, it is still slower than languages like C++ which are compiled. The fundamental reason is that Java applications, unlike C and C++ programs, run on a Java virtual machine (JVM) after compiling rather than directly on the computer’s CPU as native code. 

The performance of a Java bytecode compiled Java program is determined by how well the host Java virtual machine (JVM) manages its given tasks and how well the JVM utilizes the computer hardware and operating system (OS) in doing so. For most interactive applications, where the CPU is frequently idle waiting for input or data from other sources, its speed is more than enough.
[10:27 pm, 15/04/2022] Sayaniii: Distributed
Distributed computing involves the collaboration of multiple computers over a network. Java was created with the goal of making distributed computing simple. Because networking is inherent in Java, developing network programs is as simple as sending and receiving data to and from a file. Java also has rich features to develop microservices (is an architectural approach in which an application is structured as a collection of small services) in distributed systems.
[10:27 pm, 15/04/2022] Sayaniii: Multithreaded
Multithreaded
Multi-threading is a Java feature that facilitates the execution of two or more parts of a program at the same time to maximize CPU efficiency. A thread is a component of such a program. Threads are hence lightweight processes within processes. For example, while surfing the web, a user can listen to an audio recording. A server can serve many clients at the same time in network programming. Similarly, there are a lot of things going on in GUI programming at the same time. These simultaneous processes can be implemented in Java through multi-threading.
[10:27 pm, 15/04/2022] Sayaniii: Conclusion
So, here is a list of all of Java’s advantages. Java is the most powerful and widely used programming language currently accessible, with a wide range of applications. Java is a programming language that may be used on mobile phones, in huge enterprise systems, and even in small projects. Games, media apps, and browsers can all be made with it. Although it is unclear what the future holds for java or which technology will finally come to dominate the world of application development, one thing is certain: java will continue to be a popular programming language for years to come.
[10:27 pm, 15/04/2022] Sayaniii: Simple Java Program:
public class FirstJavaProgram {
  public static void main(String[] args){
    System.out.println("This is my first program in java");
  }//End of main
}//End of FirstJavaProgram Class
Output: This is my first program in java

How to compile and run the above program
Prerequisite: You need to have java installed on your system. You can get the java from here.

Step 1: Open a text editor, like Notepad on windows and TextEdit on Mac. Copy the above program and paste it in the text editor.

You can also use IDE like Eclipse to run the java program but we will cover that part later in the coming tutorials. For the sake of simplicity, I will only use text editor and command prompt (or terminal) for this tutorial

Step 2: Save the file as FirstJavaProgram.java. You may be wondering why we have named the file as FirstJavaProgram, the thing is that we should always name the file same as the public class name. In our program, the public class name is FirstJavaProgram, that’s why our file name should be FirstJavaProgram.java.

Step 3: In this step, we will compile the program. For this, open command prompt (cmd) on Windows, if you are Mac OS then open Terminal.
To compile the program, type the following command and hit enter.

javac FirstJavaProgram.java
You may get this error when you try to compile the program: “javac’ is not recognized as an internal or external command, operable program or batch file“. This error occurs when the java path is not set in your system

If you get this error then you first need to set the path before compilation.

Set Path in Windows:
Open command prompt (cmd), go to the place where you have installed java on your system and locate the bin directory, copy the complete path and write it in the command like this.

set path=C:\Program Files\Java\jdk1.8.0_121\bin
Note: Your jdk version may be different. Since I have java version 1.8.0_121 installed on my system, I mentioned the same while setting up the path.

Set Path in Mac OS X
Open Terminal, type the following command and hit return.

export JAVA_HOME=/Library/Java/Home
Type the following command on terminal to confirm the path.

echo $JAVA_HOME
That’s it.

The steps above are for setting up the path temporary which means when you close the command prompt or terminal, the path settings will be lost and you will have to set the path again next time you use it. I will share the permanent path setup guide in the coming tutorial.

Step 4: After compilation the .java file gets translated into the .class file(byte code). Now we can run the program. To run the program, type the following command and hit enter:

java FirstJavaProgram
Note that you should not append the .java extension to the file name while running the program.

Closer look to the First Java Program
Now that we have understood how to run a java program, let have a closer look at the program we have written above.

public class FirstJavaProgram {
This is the first line of our java program. Every java application must have at least one class definition that consists of class keyword followed by class name. When I say keyword, it means that it should not be changed, we should use it as it is. However the class name can be anything.

I have made the class public by using public access modifier, I will cover access modifier in a separate post, all you need to know now that a java file can have any number of classes but it can have only one public class and the file name should be same as public class name.

public static void main(String[] args)  {
This is our next line in the program, lets break it down to understand it:
public: This makes the main method public that means that we can call the method from outside the class.

static: We do not need to create object for static methods to run. They can run itself.

void: It does not return anything.

main: It is the method name. This is the entry point method from which the JVM can run your program.

(String[] args): Used for command line arguments that are passed as strings. We will cover that in a separate post.

System.out.println("This is my first program in java");
This method prints the contents inside the double quotes into the console and inserts a newline after.
[10:27 pm, 15/04/2022] Sayaniii: In this tutorial, we will see how to write, compile and run a java program. I will also cover java syntax, code conventions and several ways to run a java program.
[10:27 pm, 15/04/2022] Sayaniii: How to Compile and Run your First Java Program
by : Abhinav Srivastava
[10:27 pm, 15/04/2022] Sayaniii: https://github.com/asdhammu/OnlineExam
[10:27 pm, 15/04/2022] Sayaniii: https://github.com/janino-compiler/janino